#+title: Hangman

* Helper functions
** ~_get_all_indices~
~index~ only returns the first instance of an object in a sequence, but what if I
want all instances of a given object in a sequence?

I can generalize the solution in [[https://stackoverflow.com/a/28182579/2677392][Get all indexes for a python list
[duplicate] | stackoverflow]]. (Look, googling was the fastest way to check if
there was a builtin function or simple module that did this---the point of
Python isn't to reinvent the wheel.)

#+begin_src python
  def _get_all_indices(obj: T, seq: Sequence) -> List[int]:
      return [index for index, value in enumerate(seq) if value == obj]
#+end_src

#+begin_src python
  >>> _get_all_indices('o', "foobar")
  _get_all_indices('o', "foobar")
  [1, 2]
#+end_src

+Actually, it turns out with ~replace~, I don't even need this :facepalm:+ No,
actually, I need to write a ~replace_at_indices~ function.

** ~_replace_at_indices~

#+begin_src python
  def _replace_at_indices(
          xs: List[T], replacement: T, indices: int | List[int]
  ) -> List[T]:
      try:
          xs[indices] = replacement
      except TypeError:
          for index in indices:
              xs[index] = replacement
      return xs
#+end_src

Given how loose Python is with lists, the ~List[T]~ thing doesn't need to hold,
but it ought to---/and will in this use case!/

#+begin_src python
   >>> _replace_at_indices(list("foobar"), 'a', [1,2])
   _replace_at_indices(list("foobar"), 'a', [1,2])
   ['f', 'a', 'a', 'b', 'a', 'r']
   >>> _replace_at_indices(list("foobar"), 'a', 2)
   _replace_at_indices(list("foobar"), 'a', 2)
  ['f', 'o', 'a', 'b', 'a', 'r']
  >>> _replace_at_indices(list("foobar"), 'a', [])
  _replace_at_indices(list("foobar"), 'a', [])
  ['f', 'o', 'o', 'b', 'a', 'r']
#+end_src

That last one is really important because ~_get_all_indices~ may return the empty
list.

Decided to simplify the function given that it would never be called with an
integer ~indices~:

#+begin_src python
  def _replace_at_indices(
          xs: List[T], replacement: T, indices: List[int]) -> List[T]:
      for index in indices:
          xs[index] = replacement
      return xs
#+end_src

* Community solutions
From [[https://exercism.org/tracks/python/exercises/hangman/solutions/Steffan153][Steffan153]]:

#+begin_src python
  class Hangman:
      def __init__(self, word):
          self.remaining_guesses = 9
          self.status = STATUS_ONGOING
          self.guesses = []
          self.word = word

      def guess(self, char):
          if self.status != STATUS_ONGOING:
              raise ValueError("The game has already ended.")
          if char not in self.word or char in self.guesses:
              self.remaining_guesses -= 1
          else:
              self.guesses.append(char)
          self.update_status()

      def update_status(self):
          if set(self.guesses) == set(self.word):
              self.status = STATUS_WIN
          elif self.remaining_guesses < 0:
              self.status = STATUS_LOSE

      def get_masked_word(self):
          return ''.join(
              char if char in self.guesses else '_' for char in self.word
          )

      def get_status(self):
          return self.status
#+end_src

This is way better than my solution on account of the list comprehension.

* Refactoring
** ~match~ statements with constants
[[https://stackoverflow.com/a/67181772/2677392][Python 3.10 match/case with constants [duplicate] | stackoverflow]] has info on
using ~match~​/​~case~ statements with constants. Basically, you need to do something
like

#+begin_src python
  # the RIGHT way
  import types

  constants = types.SimpleNamespace()
  constants.FOO = 'foo'
  constants.BAR = 'bar'

  match string:
      case constants.FOO:
          # foo things
      case constants.BAR:
          # bar things
#+end_src

rather than

#+begin_src python
  # the WRONG way
  FOO = 'foo'
  BAR = 'bar'
  match string:
      case FOO:
          # foo things
      case BAR:
          # bar things
#+end_src

** Trouble with ~get_masked_word~?

#+begin_src python
  >>> ''.join([letter if letter != 'a' else '_' for letter in "foobar"])
  ''.join([letter if letter != 'a' else '_' for letter in "foobar"])
  'foob_r'
  >>> [guess for guess in ['a', 'b', 'c', 'foobar'] if len(guess) == 1]
  [guess for guess in ['a', 'b', 'c', 'foobar'] if len(guess) == 1]
  ['a', 'b', 'c']
#+end_src

Never mind, I was making a stupid mistake.

** Refactoring with ~match~ instead of ~if~
It actually looks pretty good like this, so as long as it's sufficiently
performant in a given application, I'll probably start favoring ~match~ for
condition-heavy control flow.
